### v0.2.6 fixes and updates

- OSC Communication is now done through a dedicated SuperCollider Quark

### v0.2.3 fixes and updates

- Effects are now implemented using busses on SuperCollider, which uses less CPU 
- Effects can be customised and defined
- Sample Player behaviour (i.e. how the string of characters relates to playback) has been altered. Square brackets refer to a single event even though two samples are played.
- SuperCollider is booted on startup with a compiled startup file.

### v0.2.2 fixes and updates

- `PDur` added: a pattern that implements Euclidean Rhythms
- Player attributes can be manipulated using the `Player.every` method
- Errors caught and displayed in FoxDot console instead of crashing
- Can set different tempi for Players using the `bpm` keyword 
- Sample Player objects can play multiple samples together by grouping them as a PGroup but cannot feature square brackets

### v0.2.1 fixes and updates

- Syntax highlighting bugs fixed
- Visual feedback for `shuffle`, `mirror`, and `rotate` methods for `play` SynthDef
- SC3 Plugins disabled by default
- Player Object dictionaries shallow copied before iteration to stop `RunTimeErrors` occurring 

### v0.2.0 fixes and updates (4/12/16)

- Reorganised project structure. Samples and code are kept separate.
- SuperCollider `OSCFunc.scd` now found in `/osc/` folder
- `setup.py` now included for an easier install
- (in progress) characters can have more than one sample attached to them. These are accessed by supplying a `buf` keyword argument.  
- Python lists can be interpreted as FoxDot pattern when attached with a P prefix e.g. `P[1, 2, 3] + [0,2]` will return `P[1,4,3,3,2,5]` not `[1,2,3,0,2]`.

---

### v0.1.9 fixes and updates
- PSparse renamed to PBin
- Loading the icon now works on Linux
- Upheaval of SCLang API
- Player Objects now have visual feedback behaviour via the `bang` method and take Tkinter tag_config keyword arguments.
- Consolas now default font
- Fixed `Pvar` and `linvar` bugs

### v0.1.8 fixes and updates
- PSparse pattern type added (all Pattern names can be seen by executing `print(PatternTypes)`
- Major overhaul of Pattern nesting/lacing behaviour. Patterns can now be nested to multiple levels.
- Player object attributes now 'follow' one another and their current  values are examined instead of the Pattern value

### v0.1.7 fixes and updates
- "Chop" added to default SynthDef behaviour
- GUI icon updated
- Using `var` objects for Player durations no longer crashes
- New Pattern types added
- FoxDot can be run using `python -m FoxDot` if FoxDot is in your PATH

### v0.1.6 fixes and updates
- Decimator (a.k.a. bitcrush) added to default SynthDef behaviour
- `SynthDefs` and `BufferManager` can be reloaded
- Removed automatic bootup of sclang as default behaviour
- Added new SynthDefs

### v0.1.5 fixes and updates
- Removed RegEx find and replace `>>` and `$` syntax. FoxDot now uses pure Python code and saved files can be run by themselves.

### v0.1.4 fixes and updates
- Save/Open file feature added
- Console can now be toggled
- Reduced CPU usage when the TempoClock queue is empty
- Added a 'grain' attribute to the `sample_player` SynthDef

### v0.1.3 fixes and updates
- Key bindings for Linux, Mac, and Windows 10 fixed
- Fixed freeze on keyboard interrupt exit
