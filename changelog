### v0.3 fixes and update

- `var` type can be used with Player `delay` and nested groups in the `oct` attribute.
- Increased `TempoClock` latency to 0.2 seconds for improved performance.
- Better handling for auto-completed quotation marks 

### v0.2.11 fixes and updates

- Caught `ImportError` if the user does not have `rtmidi` installed.
- Improved `Player.stutter

### v0.2.10 fixes and updates

- New SynthDefs added. Use `print SynthDefs` to view.
- Improved timing in the `TempoClock` class through use of threading and a latency value. Thanks to Yaxu and Charlie Roberts for the help.
- Dubstep samples added to the 'K' character. 
- Sample banks re-arranged. Use `print Samples` for more information.
- Sample Player argument, `scrub` removed. You can now use `slide`/`slidefrom` and `vib` as you would do with a normal Player object to manipulate playback rate.
- `Pattern` class now has a `layer` method that takes a name of a `Pattern` method as its first argument and then arguments and keyword arguments for that method and creates a pattern of `PGroups` with their values zipped together.

```python
>>>  print P[1,2,3,4].layer("reverse")
P[P(1, 4), P(2, 3), P(3, 2), P(4, 1)]

>>>  print P[1,2,3,4].layer("rotate", 2)
P[P(1, 3), P(2, 4), P(3, 1), P(4, 2)]
```
 
- New nested `PGroup` behaviour added for players. Each value in each `PGroup` in an event relates to the values in any other `PGroup` in the same index, even if that value is also a `PGroup`. This concept is better described through an example:

```python
p1 >> pluck((0,2), pan=(0,(-1,1)), vib=(0,(0,12)), dur=4, chop=(0,4))
```

The first note, 0, is played with a pan of 0, chop of 0, and with no vibrator added. The second note, 2, is played with a chop of 4 and with no vibrato with a pan of -1 (left) but with a vibrato value of 12 with a pan of 1 (right). 

- Experimental: Players can "follow" other Players' attributes over time by referencing their attributes.

```python
p1 >> pads([4,5,6,7], dur=2, chop=4)

p2 >> pluck(p1.degree + 2, vib=p1.chop*3)
``` 

### v0.2.9 fixes and updates

- Improved automatic bracket handling and formatting
- Colour scheme update
- "Upper-case" samples now read properly
- `cycle` argument added to the `.every()` player method to denote the cycle length of which to execute the specified method, e.g.

```
# Shuffles the samples on the 5th beat of each 8 beat cycle
bd >> play("x-o-").every(5, 'shuffle', cycle=8)
```

### v0.2.8 fixes and updates

- Minor bug fixes
- Improved automatic bracket handling and formatting
- Console is now resizable
- Scale and root can be assigned using the equals operator e.g. `Scale.default = "minor"` and `Root.default = var([0,4])`

### v0.2.7 fixes and updates

- Rest class added
- Undo and Redo functions fixed
- Infinite loop caused by empty brackets in PlayStrings fixed
- Menu bar added with several short-cuts
- Player follow method improved
- Improved documentation
- "style" keyword argument changed to "sample"

### v0.2.6 fixes and updates

- OSC Communication is now done through a dedicated SuperCollider Quark

### v0.2.3 fixes and updates

- Effects are now implemented using busses on SuperCollider, which uses less CPU 
- Effects can be customised and defined
- Sample Player behaviour (i.e. how the string of characters relates to playback) has been altered. Square brackets refer to a single event even though two samples are played.
- SuperCollider is booted on startup with a compiled startup file.

### v0.2.2 fixes and updates

- `PDur` added: a pattern that implements Euclidean Rhythms
- Player attributes can be manipulated using the `Player.every` method
- Errors caught and displayed in FoxDot console instead of crashing
- Can set different tempi for Players using the `bpm` keyword 
- Sample Player objects can play multiple samples together by grouping them as a PGroup but cannot feature square brackets

### v0.2.1 fixes and updates

- Syntax highlighting bugs fixed
- Visual feedback for `shuffle`, `mirror`, and `rotate` methods for `play` SynthDef
- SC3 Plugins disabled by default
- Player Object dictionaries shallow copied before iteration to stop `RunTimeErrors` occurring 

### v0.2.0 fixes and updates (4/12/16)

- Reorganised project structure. Samples and code are kept separate.
- SuperCollider `OSCFunc.scd` now found in `/osc/` folder
- `setup.py` now included for an easier install
- (in progress) characters can have more than one sample attached to them. These are accessed by supplying a `buf` keyword argument.  
- Python lists can be interpreted as FoxDot pattern when attached with a P prefix e.g. `P[1, 2, 3] + [0,2]` will return `P[1,4,3,3,2,5]` not `[1,2,3,0,2]`.

---

### v0.1.9 fixes and updates
- PSparse renamed to PBin
- Loading the icon now works on Linux
- Upheaval of SCLang API
- Player Objects now have visual feedback behaviour via the `bang` method and take Tkinter tag_config keyword arguments.
- Consolas now default font
- Fixed `Pvar` and `linvar` bugs

### v0.1.8 fixes and updates
- PSparse pattern type added (all Pattern names can be seen by executing `print(PatternTypes)`
- Major overhaul of Pattern nesting/lacing behaviour. Patterns can now be nested to multiple levels.
- Player object attributes now 'follow' one another and their current  values are examined instead of the Pattern value

### v0.1.7 fixes and updates
- "Chop" added to default SynthDef behaviour
- GUI icon updated
- Using `var` objects for Player durations no longer crashes
- New Pattern types added
- FoxDot can be run using `python -m FoxDot` if FoxDot is in your PATH

### v0.1.6 fixes and updates
- Decimator (a.k.a. bitcrush) added to default SynthDef behaviour
- `SynthDefs` and `BufferManager` can be reloaded
- Removed automatic bootup of sclang as default behaviour
- Added new SynthDefs

### v0.1.5 fixes and updates
- Removed RegEx find and replace `>>` and `$` syntax. FoxDot now uses pure Python code and saved files can be run by themselves.

### v0.1.4 fixes and updates
- Save/Open file feature added
- Console can now be toggled
- Reduced CPU usage when the TempoClock queue is empty
- Added a 'grain' attribute to the `sample_player` SynthDef

### v0.1.3 fixes and updates
- Key bindings for Linux, Mac, and Windows 10 fixed
- Fixed freeze on keyboard interrupt exit
